import { useMemo } from 'react';

import { IArticle, ITopicResponse } from '@/api/dashboard.ts';
import { MyArticle } from '@/api/mypage.ts';

const mockMent = `<p dir="ltr"><span>실제 사용자 데이터와 유사한팀 둘러보기용 데이터 입니다.</span></p>`;

const mock1 =
  '<p dir="ltr"><span>🔹문제 유형</span></p><p dir="ltr"><span>누적합</span></p><p dir="ltr"><br></p><p dir="ltr"><br></p><p dir="ltr"><span>🔹풀이 방법 도출 과정</span></p><p dir="ltr"><span>1) 첫번째 방법: 2중 for문</span></p><p dir="ltr"><span>처음에 for문을 이용하여 m번 동안 구간의 시작, 끝 부분을 입력 받는다.</span></p><p dir="ltr"><span>그리고 시작 구간부터 끝 부분까지 for문을 돌면서 부분합을 구한다.</span></p><p dir="ltr"><br></p><p dir="ltr"><span>m의 범위가 1≤ m ≤ 100,000이다.</span></p><p dir="ltr"><span>그리고 가장 긴 구간의 크기는 100,000이다.</span></p><p dir="ltr"><span>그래서 만약 2중 for문을 돈다면, 가장 큰 값이 10,000,000,000으로 100억이다.</span></p><p dir="ltr"><span>그러므로 시간 초과가 되므로 이 방법은 사용할 수 없다.</span></p><p dir="ltr"><br></p><p dir="ltr"><span>2) 두번째 방법: 누적합</span></p><p><a href="https://" class="editor-link"><span>누적합 참고하면 좋은 글</span></a><span> </span></p><p dir="ltr"><span>처음 for문을 돌면서 각 값의 누적합을 구한다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5"><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">1</span><span class="v">;</span><span> i</span><span class="t">&lt;=</span><span>n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span>sum </span><span class="t">+=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>st</span><span class="v">.</span><span class="s">nextToken</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span>arr</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> sum</span><span class="v">;</span><br><span class="v">}</span><br></pre><p dir="ltr"><span>부분합은 다음과 같이 구한다.</span></p><p dir="ltr"><span>n과 m의 부분합 = arr[m] - arr[n-1]</span></p><p dir="ltr"><br></p><p dir="ltr"><br></p><p dir="ltr"><span>🔹시간 복잡도 : O(N)</span></p><p dir="ltr"><span>맨 처음 각 숫자의 누적합을 구하는 것: O(N)</span></p><p dir="ltr"><span>각 구간의 합을 구하는 것: O(1)</span></p><ul><li value="1" class="editor-listitem"><span>따라서 총 시간 복잡도는 O(N)</span></li></ul><p dir="ltr"><br></p><p dir="ltr"><br></p><p dir="ltr"><span>🔹문제 풀이 핵심 코드 이미지 삽입 및 간단 설명</span></p><p dir="ltr"><a href="https://github.com/wvssm/Algorithm/blob/main/%EB%B0%B1%EC%A4%80/Silver/11659.%E2%80%85%EA%B5%AC%EA%B0%84%E2%80%85%ED%95%A9%E2%80%85%EA%B5%AC%ED%95%98%EA%B8%B0%E2%80%854/%EA%B5%AC%EA%B0%84%E2%80%85%ED%95%A9%E2%80%85%EA%B5%AC%ED%95%98%EA%B8%B0%E2%80%854.java" target="_blank" rel="noreferrer" class="editor-link"><span>전체 코드</span></a><span> 🐬</span></p><p dir="ltr"><span>누적합을 이용해 구간 합을 구했습니다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16"><span>st </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">StringTokenizer</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span>int sum </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><br><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">1</span><span class="v">;</span><span> i</span><span class="t">&lt;=</span><span>n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span>    sum </span><span class="t">+=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>st</span><span class="v">.</span><span class="s">nextToken</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span>    arr</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> sum</span><span class="v">;</span><br><span class="v">}</span><br><br><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">0</span><span class="v">;</span><span> i</span><span class="t">&lt;</span><span>m</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span>    st </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">StringTokenizer</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span>    int head </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>st</span><span class="v">.</span><span class="s">nextToken</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span>    int tail </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>st</span><span class="v">.</span><span class="s">nextToken</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>    int answer </span><span class="t">=</span><span> arr</span><span class="v">[</span><span>tail</span><span class="v">]</span><span> </span><span class="t">-</span><span> arr</span><span class="v">[</span><span>head</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><span>    bw</span><span class="v">.</span><span class="s">append</span><span class="v">(</span><span>String</span><span class="v">.</span><span class="s">valueOf</span><span class="v">(</span><span>answer</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span>    bw</span><span class="v">.</span><span class="s">newLine</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span class="v">}</span></pre>';

const mock2 = `<p dir="ltr"><span>💠 문제 유형</span></p><p dir="ltr"><span>다이나믹 프로그래밍</span></p><p><br></p><p><br></p><p dir="ltr"><span>💠풀이 방법 도출 과정</span></p><p dir="ltr"><span>도저히 어떻게 푸는 지 몰라서 답지를 참고했다.</span></p><p><br></p><p dir="ltr"><span>먼저 각 수의 경우 표현할 수 있는 방법의 수를 구한다.</span></p><p><br></p><p dir="ltr"><span>1의 표현 방법: 1가지</span></p><p><span>1</span></p><p><br></p><p dir="ltr"><span>2의 표현 방법: 2가지</span></p><p><span>1 1</span></p><p><span>2</span></p><p><br></p><p dir="ltr"><span>3의 표현 방법: 3가지</span></p><p><span>1 1 1</span></p><p><span>1 2</span></p><p><span>2 1</span></p><p><span>3</span></p><p><br></p><p dir="ltr"><span>4의 표현 방법:</span></p><p><span>1 1 1 , 1</span></p><p><span>1 2 , 1</span></p><p><span>2 1 , 1</span></p><p dir="ltr"><span>3 , 1 → 3의 표현 방법에 1을 추가한 것 d[3]</span></p><p><span>1 1 , 2</span></p><p dir="ltr"><span>2 , 2 → 2의 표현 방법에 2를 추가한 것 d[2]</span></p><p dir="ltr"><span>1 , 3 → 1의 표현 방법에 3을 추가한 것 d[1]</span></p><p><br></p><p dir="ltr"><span>4의 표현 방법 수 = 3의 표현 방법 수 + 2의 표현 방법 수 + 1의 표현 방법 수</span></p><p><br></p><p dir="ltr"><span>5의 표현 방법:</span></p><p><span>1 1 1 1 , 1</span></p><p><span>1 2 1, 1</span></p><p><span>2 1 1, 1</span></p><p><span>3 1, 1</span></p><p><span>1 1 2, 1</span></p><p><span>2 2,1</span></p><p dir="ltr"><span>1 3, 1 → 4의 표현 방법에 1을 추가한 것 d[4]</span></p><p><span>1 1 1 , 2</span></p><p><span>1 2, 2</span></p><p><span>2 1, 2</span></p><p dir="ltr"><span>3, 2 → 3의 표현 방법에 2를 추가한 것 d[3]</span></p><p><span>1 1, 3</span></p><p dir="ltr"><span>2, 3 → 2의 표현 방법에 3을 추가한 것 d[2]</span></p><p><br></p><p dir="ltr"><span>5의 표현 방법 수 = 4의 표현 방법 수 + 3의 표현 방법 수 + 2의 표현 방법 수</span></p><p><br></p><p dir="ltr"><span>위와 같이 규칙을 찾으면 점화식을 아래와 같이 표현할 수 있다.</span></p><p><br></p><p dir="ltr"><span>d[n] = d[n-1] + d[n-2] + d[n-3]</span></p><p><br></p><p dir="ltr"><span>이를 바탕으로 다이나믹 프로그래밍으로 코드를 작성할 수 있다.</span></p><p><br></p><p><br></p><p dir="ltr"><span>💠시간복잡도</span></p><ul><li value="1" class="editor-listitem"><span>O(N)</span></li></ul><p dir="ltr"><span>N의 범위가 11까지(고정 범위)여서 dp 알고리즘의 시간복잡도는 O(1)이다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4"><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">4</span><span class="v">;</span><span> i</span><span class="t">&lt;</span><span class="p">11</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span>dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">2</span><span class="v">]</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">3</span><span class="v">]</span><span class="v">;</span><br><span class="v">}</span><br></pre><p dir="ltr"><span>테스트 케이스가 T번 들어오기 때문에 시간 복잡도는 O(T)이다. (=O(N))</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6"><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">0</span><span class="v">;</span><span> i</span><span class="t">&lt;</span><span>t</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>int input </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>bw</span><span class="v">.</span><span class="s">append</span><span class="v">(</span><span>String</span><span class="v">.</span><span class="s">valueOf</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>input</span><span class="v">]</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>bw</span><span class="v">.</span><span class="s">newLine</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br></pre><p dir="ltr"><span>그래서 총 시간 복잡도는 O(N)이다.</span></p><p><br></p><p><br></p><p dir="ltr"><span>💠문제 풀이 핵심 코드 이미지 삽입 및 간단 설명</span></p><p dir="ltr"><span>DP 를 이용하여 해당 숫자의 표현할 수 있는 방법의 수를 구하였다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10"><span>int dp</span><span class="v">[</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">int</span><span class="v">[</span><span class="p">11</span><span class="v">]</span><span class="v">;</span><br><br><span>dp</span><span class="v">[</span><span class="p">1</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">1</span><span class="v">;</span><br><span>dp</span><span class="v">[</span><span class="p">2</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">2</span><span class="v">;</span><br><span>dp</span><span class="v">[</span><span class="p">3</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">4</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">4</span><span class="v">;</span><span> i</span><span class="t">&lt;</span><span class="p">11</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span>dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">2</span><span class="v">]</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">3</span><span class="v">]</span><span class="v">;</span><br><span class="v">}</span><br></pre><p><br></p><p><br></p><p dir="ltr"><span>ps. DP 문제인 것을 알아보는게 아직 익숙하지 않은 것 같다. 😭</span></p><p dir="ltr"><span>DP문제를 많이 풀고, 점화식 구하는 것에 익숙해져야겠다.</span></p><p dir="ltr"><span>점화식 구하기 너무 힘들다....</span></p>`;

const mock3 =
  '<p dir="ltr"><span>💠문제 유형</span></p><p dir="ltr"><span>완전 탐색(bfs, dfs)</span></p><p><br></p><p><br></p><p dir="ltr"><span>💠풀이 방법 도출 과정</span></p><ol><li value="1" class="editor-listitem"><span>구해야 하는 답은 바이러스가 감염된 컴퓨터의 총 수를 구해야한다.</span></li><li value="2" class="editor-listitem"><span>이를 구하려면 모든 컴퓨터를 방문하여 감염된 컴퓨터인지 확인해보아야 한다.</span></li><li value="3" class="editor-listitem"><span>1~2번의 생각 흐름은 완전 탐색 문제이다.</span></li></ol><p><br></p><p><br></p><p dir="ltr"><span>💠시간 복잡도</span></p><ul><li value="1" class="editor-listitem"><span>O(E + V)</span></li></ul><p dir="ltr"><span>각 노드(컴퓨터)를 기본적으로 한 번만 방문하여 큐에 들어간다. 왜냐하면 visited[i] 배열에 의해서 방문한 노드는 방문하지 않기 때문이다. → O(V)</span></p><p dir="ltr"><span>또한 아래 for문을 통해 해당 노드에 관련된 각 edge를 한 번 씩 방문한다. → O(E)</span></p><p dir="ltr"><span>그래서 총 시간 복잡도는 O(V+E)이다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18"><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">bfs</span><span class="v">(</span><span>int num</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>Queue</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> q </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">LinkedList</span><span class="t">&lt;</span><span class="t">&gt;</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>visited</span><span class="v">[</span><span>num</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">true</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>q</span><span class="v">.</span><span class="s">add</span><span class="v">(</span><span>num</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">while</span><span class="v">(</span><span class="t">!</span><span>q</span><span class="v">.</span><span class="s">isEmpty</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>int cur </span><span class="t">=</span><span> q</span><span class="v">.</span><span class="s">poll</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">1</span><span class="v">;</span><span> i</span><span class="t">&lt;=</span><span>n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">if</span><span class="v">(</span><span>map</span><span class="v">[</span><span>cur</span><span class="v">]</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">==</span><span> </span><span class="p">1</span><span> </span><span class="t">&amp;&amp;</span><span> visited</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="t">==</span><span class="p">false</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>cnt</span><span class="t">++</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>visited</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">true</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>q</span><span class="v">.</span><span class="s">add</span><span class="v">(</span><span>i</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span class="v">}</span></pre><p><br></p><p><br></p><p dir="ltr"><span>💠문제 풀이 핵심 코드 이미지 삽입 및 간단 설명</span></p><p><br></p><p dir="ltr"><a href="https://github.com/wvssm/Algorithm/blob/main/%EB%B0%B1%EC%A4%80/Silver/2606.%E2%80%85%EB%B0%94%EC%9D%B4%EB%9F%AC%EC%8A%A4/%EB%B0%94%EC%9D%B4%EB%9F%AC%EC%8A%A4.java" target="_blank" rel="noreferrer" class="editor-link"><span>전체 코드</span></a><span>🐬</span></p><p dir="ltr"><span>완전 탐색을 이용하여 각 노드(컴퓨터)를 방문하여 바이러스에 감염되었는지 확인하였다.</span></p><p dir="ltr"><span>dfs로 구현</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11"><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">dfs</span><span class="v">(</span><span>int num</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>visited</span><span class="v">[</span><span>num</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">true</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">1</span><span class="v">;</span><span> i</span><span class="t">&lt;=</span><span>n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">if</span><span class="v">(</span><span>map</span><span class="v">[</span><span>num</span><span class="v">]</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">==</span><span> </span><span class="p">1</span><span> </span><span class="t">&amp;&amp;</span><span> visited</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">==</span><span> </span><span class="p">false</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="s">dfs</span><span class="v">(</span><span>i</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>cnt</span><span class="t">++</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br></pre><p><br></p><p dir="ltr"><span>bfs로 구현</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19"><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">bfs</span><span class="v">(</span><span>int num</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>Queue</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> q </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">LinkedList</span><span class="t">&lt;</span><span class="t">&gt;</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>visited</span><span class="v">[</span><span>num</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">true</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>q</span><span class="v">.</span><span class="s">add</span><span class="v">(</span><span>num</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">while</span><span class="v">(</span><span class="t">!</span><span>q</span><span class="v">.</span><span class="s">isEmpty</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>int cur </span><span class="t">=</span><span> q</span><span class="v">.</span><span class="s">poll</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">for</span><span class="v">(</span><span>int i</span><span class="t">=</span><span class="p">1</span><span class="v">;</span><span> i</span><span class="t">&lt;=</span><span>n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="o">if</span><span class="v">(</span><span>map</span><span class="v">[</span><span>cur</span><span class="v">]</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">==</span><span> </span><span class="p">1</span><span> </span><span class="t">&amp;&amp;</span><span> visited</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="t">==</span><span class="p">false</span><span class="v">)</span><span> </span><span class="v">{</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>cnt</span><span class="t">++</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>visited</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> </span><span class="p">true</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span>q</span><span class="v">.</span><span class="s">add</span><span class="v">(</span><span>i</span><span class="v">)</span><span class="v">;</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br><span style="white-space: pre-wrap;">\t</span><span class="v">}</span><br></pre>';

const mock4 =
  '<p dir="ltr"><span>📢 1/25 오늘의 문제</span></p><p dir="ltr"><span>class2:  백준 9012번 : </span><a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener noreferrer" class="editor-link"><span>괄호</span></a></p><p dir="ltr"><span>class4:  백준 1753번 : </span><a href="https://www.acmicpc.net/problem/1753" target="_blank" rel="noopener noreferrer" class="editor-link"><span>최단경로</span></a></p><p><span>-----------------------------------------------------------------------------------------------------------</span></p><p dir="ltr"><span>🔗 문제 풀이 예시 (복사해서 가져가세요!)</span></p><p><br></p><p dir="ltr"><span>제목 (예시)</span></p><p dir="ltr"><span>1/7 class2 - 백준 1003번 : 피보나치 함수</span></p><p><br></p><p dir="ltr"><span>문제 유형</span></p><p dir="ltr"><span>다이나믹 프로그래밍</span></p><p><br></p><p dir="ltr"><span>풀이 도출 과정</span></p><ol><li value="1" class="editor-listitem"><span>구해야 하는 답은 합이 최대가 되는 경로이다.</span></li><li value="2" class="editor-listitem"><span>맨 아래층을 생각해보자.</span></li><li value="3" class="editor-listitem"><span>맨 아래층의 각 위치에서의 최대 경로는 해당 위치에서 대각선 왼쪽 또는 오른쪽 중 큰 값을 선택한 후 해당 위치의 정수 값을 더하면 된다.</span></li><li value="4" class="editor-listitem"><span>맨 아래층 모든 위치에서 이러한 계산을 진행 한 후 그 중 최대값을 선택하면 답이된다.</span></li><li value="5" class="editor-listitem"><span>2 ~ 4 번의 생각 흐름은 전형적인 다이나믹 프로그래밍 문제이다.</span></li></ol><p><br></p><p dir="ltr"><span>시간 복잡도</span></p><p dir="ltr"><span>크기만큼 for문을 순회하고 각 줄의 크기만큼 for문을 다시 순회하여 계산을 해야한다. 따라서 시간복잡도를 구하면</span></p><ul><li value="1" class="editor-listitem"><span>O(n^2)</span></li></ul><p><br></p><p dir="ltr"><span>문제 풀이 핵심 코드  및 간단 설명 (이미지 가능)</span></p><p dir="ltr"><span>2차원 배열을 활용하여 Dynamic Programming을 활용했다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"><span class="o">public</span><span> </span><span class="o">class</span><span> </span><span class="s">Main</span><span> </span><span class="v">{</span><br><br><span>    </span><span class="o">public</span><span> </span><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">main</span><span class="v">(</span><span>String</span><span class="v">[</span><span class="v">]</span><span> args</span><span class="v">)</span><span> throws IOException </span><span class="v">{</span><br><span>        BufferedReader br </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">BufferedReader</span><span class="v">(</span><span class="o">new</span><span> </span><span class="s">InputStreamReader</span><span class="v">(</span><span>System</span><span class="v">.</span><span>in</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        int n </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> </span><span class="v">[</span><span class="v">]</span><span> tri </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">List</span><span class="v">[</span><span>n</span><span class="v">]</span><span class="v">;</span><br><span>        int </span><span class="v">[</span><span class="v">]</span><span class="v">[</span><span class="v">]</span><span> dp </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">int</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">split</span><span class="v">(</span><span class="q">" "</span><span class="v">)</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">map</span><span class="v">(</span><span>Integer</span><span class="t">:</span><span class="t">:</span><span>parseInt</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">collect</span><span class="v">(</span><span>Collectors</span><span class="v">.</span><span class="s">toList</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>            tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">;</span><br><span>        </span><span class="v">}</span><br><br><span>        dp</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span> </span><span class="t">=</span><span> tri</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span class="p">0</span><span class="v">)</span><span class="v">;</span><br><span>        </span><br><span>        </span><span class="r">//핵심 코드</span><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">1</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">;</span><br><br><span>            </span><span class="o">for</span><span class="v">(</span><span>int j </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> j </span><span class="t">&lt;</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><span> j</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>                </span><span class="o">if</span><span class="v">(</span><span>j</span><span class="t">==</span><span class="p">0</span><span class="v">)</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span> </span><span class="o">if</span><span> </span><span class="v">(</span><span>j </span><span class="t">==</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span> </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">)</span><span> </span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> Math</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">,</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">)</span><span> </span><span class="t">+</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span class="v">;</span><br><span>                </span><span class="v">}</span><br><span>            </span><span class="v">}</span><br><span>        </span><span class="v">}</span><br><br><span>        int max </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>n </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">]</span><span class="v">)</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">getAsInt</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><br><span>        System</span><span class="v">.</span><span>out</span><span class="v">.</span><span class="s">println</span><span class="v">(</span><span>max</span><span class="v">)</span><span class="v">;</span><br><span>    </span><span class="v">}</span><br><span class="v">}</span></pre>';

const mock5 =
  '<p dir="ltr" style="text-align: start;"><span>📢 1/23 오늘의 문제</span></p><p dir="ltr" style="text-align: start;"><span>class2:  백준 2839번 : </span><a href="https://www.acmicpc.net/problem/2839" target="_blank" rel="noreferrer" class="editor-link"><span>설탕 배달</span></a></p><p dir="ltr" style="text-align: start;"><span>class4:  백준 2638번 : </span><a href="https://www.acmicpc.net/problem/2638" target="_blank" rel="noreferrer" class="editor-link"><span>치즈</span></a></p><p style="text-align: start;"><span>-----------------------------------------------------------------------------------------------------------</span></p><p dir="ltr" style="text-align: start;"><span>🔗 문제 풀이 예시 (복사해서 가져가세요!)</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>제목 (예시)</span></p><p dir="ltr" style="text-align: start;"><span>1/7 class2 - 백준 1003번 : 피보나치 함수</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>문제 유형</span></p><p dir="ltr" style="text-align: start;"><span>다이나믹 프로그래밍</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>풀이 도출 과정</span></p><ol><li value="1" class="editor-listitem"><span>구해야 하는 답은 합이 최대가 되는 경로이다.</span></li><li value="2" class="editor-listitem"><span>맨 아래층을 생각해보자.</span></li><li value="3" class="editor-listitem"><span>맨 아래층의 각 위치에서의 최대 경로는 해당 위치에서 대각선 왼쪽 또는 오른쪽 중 큰 값을 선택한 후 해당 위치의 정수 값을 더하면 된다.</span></li><li value="4" class="editor-listitem"><span>맨 아래층 모든 위치에서 이러한 계산을 진행 한 후 그 중 최대값을 선택하면 답이된다.</span></li><li value="5" class="editor-listitem"><span>2 ~ 4 번의 생각 흐름은 전형적인 다이나믹 프로그래밍 문제이다.</span></li></ol><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>시간 복잡도</span></p><p dir="ltr" style="text-align: start;"><span>크기만큼 for문을 순회하고 각 줄의 크기만큼 for문을 다시 순회하여 계산을 해야한다. 따라서 시간복잡도를 구하면</span></p><ul><li value="1" class="editor-listitem"><span>O(n^2)</span></li></ul><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>문제 풀이 핵심 코드  및 간단 설명 (이미지 가능)</span></p><p dir="ltr" style="text-align: start;"><span>2차원 배열을 활용하여 Dynamic Programming을 활용했다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"><span class="o">public</span><span> </span><span class="o">class</span><span> </span><span class="s">Main</span><span> </span><span class="v">{</span><br><br><span>    </span><span class="o">public</span><span> </span><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">main</span><span class="v">(</span><span>String</span><span class="v">[</span><span class="v">]</span><span> args</span><span class="v">)</span><span> throws IOException </span><span class="v">{</span><br><span>        BufferedReader br </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">BufferedReader</span><span class="v">(</span><span class="o">new</span><span> </span><span class="s">InputStreamReader</span><span class="v">(</span><span>System</span><span class="v">.</span><span>in</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        int n </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> </span><span class="v">[</span><span class="v">]</span><span> tri </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">List</span><span class="v">[</span><span>n</span><span class="v">]</span><span class="v">;</span><br><span>        int </span><span class="v">[</span><span class="v">]</span><span class="v">[</span><span class="v">]</span><span> dp </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">int</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">split</span><span class="v">(</span><span class="q">" "</span><span class="v">)</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">map</span><span class="v">(</span><span>Integer</span><span class="t">:</span><span class="t">:</span><span>parseInt</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">collect</span><span class="v">(</span><span>Collectors</span><span class="v">.</span><span class="s">toList</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>            tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">;</span><br><span>        </span><span class="v">}</span><br><br><span>        dp</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span> </span><span class="t">=</span><span> tri</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span class="p">0</span><span class="v">)</span><span class="v">;</span><br><span>        </span><br><span>        </span><span class="r">//핵심 코드</span><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">1</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">;</span><br><br><span>            </span><span class="o">for</span><span class="v">(</span><span>int j </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> j </span><span class="t">&lt;</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><span> j</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>                </span><span class="o">if</span><span class="v">(</span><span>j</span><span class="t">==</span><span class="p">0</span><span class="v">)</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span> </span><span class="o">if</span><span> </span><span class="v">(</span><span>j </span><span class="t">==</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span> </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">)</span><span> </span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> Math</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">,</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">)</span><span> </span><span class="t">+</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span class="v">;</span><br><span>                </span><span class="v">}</span><br><span>            </span><span class="v">}</span><br><span>        </span><span class="v">}</span><br><br><span>        int max </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>n </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">]</span><span class="v">)</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">getAsInt</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><br><span>        System</span><span class="v">.</span><span>out</span><span class="v">.</span><span class="s">println</span><span class="v">(</span><span>max</span><span class="v">)</span><span class="v">;</span><br><span>    </span><span class="v">}</span><br><span class="v">}</span></pre><p><br></p>';

const mock6 =
  '<p dir="ltr" style="text-align: start;"><span>📢 1/23 오늘의 문제</span></p><p dir="ltr" style="text-align: start;"><span>class2:  백준 11050번 : </span><a href="https://www.acmicpc.net/problem/11050" target="_blank" rel="noreferrer" class="editor-link"><span>이항계수</span></a></p><p dir="ltr" style="text-align: start;"><span>class4:  백준 11053번 : </span><a href="https://www.acmicpc.net/problem/11053" target="_blank" rel="noreferrer" class="editor-link"><span>가장 긴 증하는 부분 수열</span></a></p><p style="text-align: start;"><span>-----------------------------------------------------------------------------------------------------------</span></p><p dir="ltr" style="text-align: start;"><span>🔗 문제 풀이 예시 (복사해서 가져가세요!)</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>제목 (예시)</span></p><p dir="ltr" style="text-align: start;"><span>1/7 class2 - 백준 1003번 : 피보나치 함수</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>문제 유형</span></p><p dir="ltr" style="text-align: start;"><span>다이나믹 프로그래밍</span></p><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>풀이 도출 과정</span></p><ol><li value="1" class="editor-listitem" style="text-align: start;"><span>구해야 하는 답은 합이 최대가 되는 경로이다.</span></li><li value="2" class="editor-listitem" style="text-align: start;"><span>맨 아래층을 생각해보자.</span></li><li value="3" class="editor-listitem" style="text-align: start;"><span>맨 아래층의 각 위치에서의 최대 경로는 해당 위치에서 대각선 왼쪽 또는 오른쪽 중 큰 값을 선택한 후 해당 위치의 정수 값을 더하면 된다.</span></li><li value="4" class="editor-listitem" style="text-align: start;"><span>맨 아래층 모든 위치에서 이러한 계산을 진행 한 후 그 중 최대값을 선택하면 답이된다.</span></li><li value="5" class="editor-listitem" style="text-align: start;"><span>2 ~ 4 번의 생각 흐름은 전형적인 다이나믹 프로그래밍 문제이다.</span></li></ol><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>시간 복잡도</span></p><p dir="ltr" style="text-align: start;"><span>크기만큼 for문을 순회하고 각 줄의 크기만큼 for문을 다시 순회하여 계산을 해야한다. 따라서 시간복잡도를 구하면</span></p><ul><li value="1" class="editor-listitem" style="text-align: start;"><span>O(n^2)</span></li></ul><p style="text-align: start;"><br></p><p dir="ltr" style="text-align: start;"><span>문제 풀이 핵심 코드  및 간단 설명 (이미지 가능)</span></p><p dir="ltr" style="text-align: start;"><span>2차원 배열을 활용하여 Dynamic Programming을 활용했다.</span></p><pre class="codeblock" spellcheck="false" data-gutter="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"><span class="o">public</span><span> </span><span class="o">class</span><span> </span><span class="s">Main</span><span> </span><span class="v">{</span><br><br><span>    </span><span class="o">public</span><span> </span><span class="o">static</span><span> </span><span class="o">void</span><span> </span><span class="s">main</span><span class="v">(</span><span>String</span><span class="v">[</span><span class="v">]</span><span> args</span><span class="v">)</span><span> throws IOException </span><span class="v">{</span><br><span>        BufferedReader br </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">BufferedReader</span><span class="v">(</span><span class="o">new</span><span> </span><span class="s">InputStreamReader</span><span class="v">(</span><span>System</span><span class="v">.</span><span>in</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        int n </span><span class="t">=</span><span> Integer</span><span class="v">.</span><span class="s">parseInt</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>        List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> </span><span class="v">[</span><span class="v">]</span><span> tri </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">List</span><span class="v">[</span><span>n</span><span class="v">]</span><span class="v">;</span><br><span>        int </span><span class="v">[</span><span class="v">]</span><span class="v">[</span><span class="v">]</span><span> dp </span><span class="t">=</span><span> </span><span class="o">new</span><span> </span><span class="s">int</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>n</span><span class="t">+</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>br</span><span class="v">.</span><span class="s">readLine</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">split</span><span class="v">(</span><span class="q">" "</span><span class="v">)</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">map</span><span class="v">(</span><span>Integer</span><span class="t">:</span><span class="t">:</span><span>parseInt</span><span class="v">)</span><br><span>                    </span><span class="v">.</span><span class="s">collect</span><span class="v">(</span><span>Collectors</span><span class="v">.</span><span class="s">toList</span><span class="v">(</span><span class="v">)</span><span class="v">)</span><span class="v">;</span><br><br><span>            tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">;</span><br><span>        </span><span class="v">}</span><br><br><span>        dp</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span> </span><span class="t">=</span><span> tri</span><span class="v">[</span><span class="p">0</span><span class="v">]</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span class="p">0</span><span class="v">)</span><span class="v">;</span><br><span>        </span><br><span>        </span><span class="r">//핵심 코드</span><br><span>        </span><span class="o">for</span><span class="v">(</span><span>int i </span><span class="t">=</span><span> </span><span class="p">1</span><span class="v">;</span><span> i </span><span class="t">&lt;</span><span> n</span><span class="v">;</span><span> i</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>            List</span><span class="t">&lt;</span><span>Integer</span><span class="t">&gt;</span><span> numbers </span><span class="t">=</span><span> tri</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">;</span><br><br><span>            </span><span class="o">for</span><span class="v">(</span><span>int j </span><span class="t">=</span><span> </span><span class="p">0</span><span class="v">;</span><span> j </span><span class="t">&lt;</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><span> j</span><span class="t">++</span><span class="v">)</span><span class="v">{</span><br><span>                </span><span class="o">if</span><span class="v">(</span><span>j</span><span class="t">==</span><span class="p">0</span><span class="v">)</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span> </span><span class="o">if</span><span> </span><span class="v">(</span><span>j </span><span class="t">==</span><span> numbers</span><span class="v">.</span><span class="s">size</span><span class="v">(</span><span class="v">)</span><span> </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">)</span><span> </span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span> </span><span class="t">+</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">;</span><br><span>                </span><span class="v">}</span><span> </span><span class="o">else</span><span class="v">{</span><br><span>                    dp</span><span class="v">[</span><span>i</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span> </span><span class="t">=</span><span> Math</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">,</span><span> dp</span><span class="v">[</span><span>i</span><span class="t">-</span><span class="p">1</span><span class="v">]</span><span class="v">[</span><span>j</span><span class="v">]</span><span class="v">)</span><span> </span><span class="t">+</span><span> numbers</span><span class="v">.</span><span class="s">get</span><span class="v">(</span><span>j</span><span class="v">)</span><span class="v">;</span><br><span>                </span><span class="v">}</span><br><span>            </span><span class="v">}</span><br><span>        </span><span class="v">}</span><br><br><span>        int max </span><span class="t">=</span><span> Arrays</span><span class="v">.</span><span class="s">stream</span><span class="v">(</span><span>dp</span><span class="v">[</span><span>n </span><span class="t">-</span><span> </span><span class="p">1</span><span class="v">]</span><span class="v">)</span><span class="v">.</span><span class="s">max</span><span class="v">(</span><span class="v">)</span><span class="v">.</span><span class="s">getAsInt</span><span class="v">(</span><span class="v">)</span><span class="v">;</span><br><br><span>        System</span><span class="v">.</span><span>out</span><span class="v">.</span><span class="s">println</span><span class="v">(</span><span>max</span><span class="v">)</span><span class="v">;</span><br><span>    </span><span class="v">}</span><br><span class="v">}</span></pre>';

const mocks = [mock1, mock2, mock3, mock4, mock5, mock6];

const regroupArticle = (data: IArticle | ITopicResponse | MyArticle) => {
  if (data.articleBody === null) {
    if (data.articleId) {
      return mockMent + mocks[data.articleId % 6];
    }
    return '';
  }

  // if (!data.imageUrls || data.imageUrls.length === 0) {
  if (!data.imageUrl) {
    return data.articleBody;
  } else {
    return data.articleBody?.replace(/src="\?"/, `src="${data.imageUrl}"`);
  }
  // TODO: 이미지 하나
  // let imgIndex = 0;
  //
  // const images = data.imageUrls;
  //
  // const articleWithImages = data.articleBody.replace(
  //   /(<img[^>]*src=")\?("[^>]*>)/g,
  //   (match, prefix, suffix) => {
  //     if (imgIndex < images.length) {
  //       return `${prefix}${images[imgIndex++]}${suffix}`;
  //     }
  //     return match;
  //   }
  // );
  //
  // console.error('img topics', articleWithImages);
  //
  // return articleWithImages;
};

export const useRegroupImageAndArticle = (
  data: IArticle | ITopicResponse | MyArticle | undefined | null
) => {
  const result = useMemo(() => {
    if (data === undefined || data === null) {
      return '';
    }

    return regroupArticle(data);
  }, [data]);

  return {
    result,
  };
};
